<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark" title="录音"
		creationComplete="view1_creationCompleteHandler(event)">
	<s:layout>
		<s:VerticalLayout/>
	</s:layout>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<s:Label text=" "/>
	<s:Label id="label_support" text="支持录音"/>
	
	<fx:Script>
		<![CDATA[
		import com.adobe.audio.format.WAVWriter;
		import fr.kikko.lab.ShineMP3Encoder;
		import mx.events.FlexEvent;
		import mx.rpc.events.ResultEvent;
		import mx.rpc.http.HTTPService;
		private var _loader:URLLoader;
		
		protected function view1_creationCompleteHandler(event:FlexEvent):void
		{
			init();
		}
		
		private function loaderHandler(event:*):void {
			trace(event.type);
			switch(event.type) {
				case Event.COMPLETE:
					// 接收到的服务端数据
					var start:Number=getTimer();
					var byte:ByteArray = _loader.data as ByteArray;
					trace(byte.length);
					byte.uncompress();
					//      var obj:LoadUpVoiceResultVO = byte.readObject();
					//      var end:Number=getTimer();
					//      trace("耗时：" + (end - start) + "毫秒");
					//      trace(obj);
					//      trace(obj.voiceIds);
					//      trace(obj.voiceIds.length);
					//      trace(obj.voiceIds[0]);
					//      trace(obj.voiceIds[1]);
					var obj:TakeVoiceResultVO = byte.readObject();
					trace(obj);
					if(null == obj)return;
					trace(obj.voiceId);
					trace(obj.voiceBytes.length);
					trace(obj.voiceBytes.readUTF());
				break;
			}
		}
		public function httpResult(event:ResultEvent):void
		{
			trace("aaaaaaaaaaaaaaaaaaa")
			trace(event.result);
		}
		[Bindable]
		public var isRecording  :Boolean = false;
		private var _timer   :Timer = new Timer(1000, 20);
		private var _recordByte  :ByteArray;
		private var _microphone  :Microphone;
		private function init():void {
			_microphone = Microphone.getMicrophone();
			if (_microphone==null) {
				label_support.text="不支持录音";
				return;
			}
			_timer.addEventListener(TimerEvent.TIMER, function (e:TimerEvent):void {});
			_timer.addEventListener(TimerEvent.TIMER_COMPLETE, _stopRecordHandler);
			_microphone.rate = 44;//麥克風擷取聲音的速率，以 kHz 為單位。
			_microphone.encodeQuality = 1;//使用 Speex 轉碼器時的編碼語音品質。
			_microphone.setUseEchoSuppression(true);//指定是否使用音效轉碼器的回音抑制功能。
			_microphone.setLoopBack(false);//true-將麥克風擷取的音效遞送到本機喇叭。
			_microphone.setSilenceLevel(0,0);//設定可認定為有聲的最低音量輸入水準，以及 (選擇性) 真正算是靜音前所需歷經的無聲時間長度。
			_microphone.gain=50;//麥克風增量，也就是麥克風在傳輸前放大訊號時相乘的量。
		}
		private function _playRecordHandler(e:MouseEvent):void{
			_recordByte.position = 0;
			var soundOutput:Sound = new Sound();
			soundOutput.addEventListener(SampleDataEvent.SAMPLE_DATA, _playSoundSampleDataHandler);
			soundOutput.play();
		}
		private function _playSoundSampleDataHandler(e:SampleDataEvent) : void    {
			if (!_recordByte.bytesAvailable > 0)   {
			return;
			}
			var i:int = 0;
			var _length:Number;
			while (i < 8192) {
				_length = 0;
				if (_recordByte.bytesAvailable > 0)    {
					_length = _recordByte.readFloat();
				}
				e.data.writeFloat(_length);
				e.data.writeFloat(_length);
				i++;
			}
		}
		private function _startRecHandler(e:MouseEvent):void {
			isRecording = true;
			_recordByte = new ByteArray();
			_microphone.addEventListener(SampleDataEvent.SAMPLE_DATA, _microphoneSampleDataHandler);
			_timer.reset();
			_timer.start();
		}
		public function _stopRecordHandler(e:Event = null) : void     {
			_timer.stop();
			isRecording = false;
			_microphone.removeEventListener(SampleDataEvent.SAMPLE_DATA, _microphoneSampleDataHandler);
		}
		private function _microphoneSampleDataHandler(e:SampleDataEvent):void {
			_recordByte.writeBytes(e.data);
		}
		private function _saveWavHandler(e:Event = null) : void    {
			var _wavWriter :WAVWriter = new WAVWriter();
			_wavWriter.numOfChannels = 1;
			_wavWriter.sampleBitRate = 8;
			_wavWriter.samplingRate = 5100;
			var _resultSamples:ByteArray = new ByteArray();
			_recordByte.position = 0;
			_wavWriter.processSamples(_resultSamples,_recordByte, _wavWriter.samplingRate, 1);
			var _file  :FileReference = new FileReference();
			_file.save(_resultSamples, "FP10MicphoneRecord.wav");
			//    _resultSamples.position = 0;
			//
			//    mp3encoder = new ShineMP3Encoder(_resultSamples);
			//    mp3encoder.addEventListener(Event.COMPLETE, onEncoded);
			//    mp3encoder.start();
		}
		private function onEncoded(e:Event):void{
			//    myTI.text = "mp3 encoded";
			mp3encoder.mp3Data.position = 0;
			mp3encoder.saveAs("monSon.mp3");
			//    var _file  :FileReference = new FileReference();
			//    _file.save(_resultSamples, "FP10MicphoneRecord.wav");
		}
		private var mp3encoder:ShineMP3Encoder;
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	
	<s:Button id="start" x="72" y="69"  width="200" label="开始" click="_startRecHandler(event)"/>
	<s:Button id="end"   x="72" y="143" width="200" label="结束" click="_stopRecordHandler(event)"/>
	<s:Button id="save"  x="72" y="225" width="200" label="保存" click="_saveWavHandler(event)"/>
	<s:Button id="ting"  x="72" y="291" width="200" label="播放" click="_playRecordHandler(event)"/>
</s:View>
